[{"C:\\Users\\Aaron\\Desktop\\randommovie\\src\\index.js":"1","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\App.js":"2","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\Spinner\\Spinner.jsx":"3","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\Form\\Form.js":"4","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\MovieDisplay\\MovieDisplay.js":"5"},{"size":186,"mtime":1611009937855,"results":"6","hashOfConfig":"7"},{"size":5117,"mtime":1611339014325,"results":"8","hashOfConfig":"7"},{"size":1474,"mtime":1610411140421,"results":"9","hashOfConfig":"7"},{"size":6108,"mtime":1611325169154,"results":"10","hashOfConfig":"7"},{"size":2622,"mtime":1611337557772,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1esa8dk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"C:\\Users\\Aaron\\Desktop\\randommovie\\src\\index.js",[],["26","27"],"C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\App.js",["28","29"],"import React, {useEffect, useState} from \"react\"\nimport Spinner from './Spinner/Spinner'\nimport axios from 'axios'\nimport Form from './Form/Form'\nimport MovieDisplay from './MovieDisplay/MovieDisplay'\nimport Grid from '@material-ui/core/Grid'\nimport Hidden from '@material-ui/core/Hidden';\nimport Fade from '@material-ui/core/Fade';\nimport Box from '@material-ui/core/Box'\nimport Alert from '@material-ui/lab/Alert';\nimport tmdb from '../images/tmdb.svg'\n\nconst App = () => {\n  const API_KEY = 'e14c0b9ace34c59179849cf6b600f43f'\n  const URL = 'https://api.themoviedb.org/3/'\n\n  const [loading, setLoading] = useState(true)\n  const [movieString, setMovieString] = useState('&sort_by=vote_average.desc?certification_country=US&vote_average.gte=8&vote_count.gte=300')\n  const [loadMovieState, setLoadMovieState] = useState(0)\n  const [movieData, setMovieData] = useState('')\n  const [genres, setGenres] = useState('')\n  const [genreString, setGenreString] = useState('')\n  const [checked, setChecked] = useState(false);\n\n  const logoStyles = {\n    position: \"fixed\",\n    bottom: \"2%\",\n    left: \"1%\",\n    width: \"5%\"\n  };\n\n  const alertStyle = {\n    position: \"fixed\",\n    width: \"58%\",\n    alignItems: \"center\",\n    left: \"20%\",\n    bottom: \"2%\"\n  };\n\n  function getRandom(max) {\n    return Math.ceil(Math.random() * max);\n  }\n\n  //get movie data\n  useEffect(() => {\n    setLoading(true)\n      axios({\n        method: 'GET',\n        url: URL + 'discover/movie?api_key=' + API_KEY + movieString\n      }).then(res => {\n        setChecked(false)\n\n        axios({\n          method: 'GET',\n          url: URL + 'discover/movie?api_key=' + API_KEY + movieString + '&page=' + getRandom(res.data.total_pages) \n        }).then(res => {\n          let randomNum = getRandom(res.data.results.length-1)\n          setMovieData(res.data.results[randomNum])\n\n          if(!genres){\n            axios({\n              method: 'GET',\n              url: URL + 'genre/movie/list?api_key=' + API_KEY\n            }).then(res2 => {\n              res2.data.genres.sort((a,b) => {\n                if(a.name > b.name){\n                  return 1\n                }else{\n                  return -1\n                }\n              })\n      \n              res2.data.genres.unshift({name:'All', id: ''})\n              parseGenres(res2.data.genres, res.data.results[randomNum].genre_ids)\n              setGenres(res2.data.genres)\n            })\n          }else{\n            parseGenres(genres, movieData.genre_ids)\n          }\n        }).catch(\n          function (error) {\n            setChecked(true)\n            return Promise.reject(error)\n          }\n        )\n      })\n    setLoading(false)\n  }, [loadMovieState])\n\n  //parse genres\n  const parseGenres = (genre_list, genre_ids) => {\n    let tempGenres = ''\n\n      for(let i = 0; i < genre_ids.length; i++){\n        for(let j = 0; j < genre_list.length; j++){\n          if(genre_list[j].id === genre_ids[i]){\n            tempGenres += genre_list[j].name + \", \"\n            break\n          }\n        }\n      }\n      \n      if(tempGenres){\n        tempGenres = tempGenres.slice(0, -2)\n      }\n\n      setGenreString(tempGenres)\n  }\n\n  //callback for form\n  const handleDataCallback = (data) => {\n    let url = ''\n\n    if(data.language){\n      url = url + '&with_original_language=' + data.language\n    }\n    \n    if(data.rating){\n      url = url + '&vote_average.gte=' + data.rating\n    }\n\n    if(data.popularity){\n      url = url + '&vote_count.gte=' + data.popularity\n    }\n\n    if(data.genre){\n      url = url + '&with_genres=' + data.genre\n    }\n\n    if(data.startYear){\n      url = url + '&primary_release_date.gte=' + data.startYear + '-01-01'\n    }\n\n    if(data.endYear){\n      let endYear = parseInt(data.endYear) + 1 \n      url = url + '&primary_release_date.lte=' + endYear + '-01-01'\n    }\n\n    setMovieString(url)\n\n    if(loadMovieState == 0){\n      setLoadMovieState(1)\n    }else{\n      setLoadMovieState(0)\n    }\n  }\n\n  return (\n    <Box height=\"100%\" padding={1} borderRadius={1} borderColor=\"primary.main\">\n        <Grid container alignItems=\"stretch\" margin=\"auto\">\n          <Grid item style={{background:\"white\"}} xs={12}>\n            <Box px={4} margin={\"1%\"} textAlign=\"center\">\n              <br></br>\n            </Box>\n          </Grid>\n          <Grid item style={{background:'linear-gradient(white 80%,  #3c54b5 70%)'}} xs={3}>\n            <Box padding={4} margin={\"auto\"} height={\"70%\"} minHeight={\"600px\"}>\n              <Form api_key={API_KEY} url={URL} dataCallback={handleDataCallback} />\n            </Box>\n          </Grid>\n          <Grid item style={{background:'linear-gradient(white 80%,  #3c54b5 70%)'}} xs={9} height={\"100vh\"}>\n            <MovieDisplay info={movieData} genres={genreString}/>\n          </Grid>\n        </Grid>\n        {loading && <Spinner />}\n        <Hidden mdDown>\n          <img style={logoStyles} src={tmdb} alt=\"logo\" />\n        </Hidden>\n        <Fade in={checked}>\n          <Alert style={alertStyle} severity=\"info\">Unable to find a movie. Please optimize your filter.</Alert>\n        </Fade>\n      </Box>\n  );\n}\n\nexport default App;\n","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\Spinner\\Spinner.jsx",[],"C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\Form\\Form.js",["30","31"],"import React, {useState, useEffect} from \"react\"\r\nimport axios from 'axios'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst Form = (props) => {\r\n\r\n    const [rating, setRating] = useState(7)\r\n    const [popularity, setPopularity] = useState(1200)\r\n    const [startYear, setStartYear] = useState('');\r\n    const [endYear, setEndYear] = useState('');\r\n    const [language, setLanguage] = useState('');\r\n    const [languages, setLanguages] = useState([{english_name:'All',iso_639_1: ''}])\r\n    const [genre, setGenre] = useState('');\r\n    const [genres, setGenres] = useState([{name:'All', id: ''}])\r\n    const dateRange = Array.from({length: 125}, (x, i) => 2025 - i);\r\n\r\n    useEffect(() => {\r\n      axios({\r\n        method: 'GET',\r\n        url: props.url + 'configuration/languages?api_key=' + props.api_key\r\n      }).then(res => {\r\n\r\n        res.data.sort((a,b) => {\r\n          if(a.english_name > b.english_name){\r\n            return 1\r\n          }else{\r\n            return -1\r\n          }\r\n        })\r\n\r\n        for(let i = 0; i < res.data.length; i++){\r\n          if(res.data[i].iso_639_1 === 'en'){\r\n            res.data.unshift(res.data.splice(i,1)[0])\r\n          }\r\n        }\r\n        res.data.unshift({english_name:'All',iso_639_1: ''})\r\n        setLanguages(res.data)\r\n      })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      axios({\r\n        method: 'GET',\r\n        url: props.url + 'genre/movie/list?api_key=' + props.api_key\r\n      }).then(res => {\r\n        res.data.genres.sort((a,b) => {\r\n          if(a.name > b.name){\r\n            return 1\r\n          }else{\r\n            return -1\r\n          }\r\n        })\r\n\r\n        res.data.genres.unshift({name:'All', id: ''})\r\n        setGenres(res.data.genres)\r\n      })\r\n    }, [])\r\n\r\n    const handleGeneralChange = (event) => {\r\n\r\n      if(event.target.name === 'genre'){\r\n        setGenre(event.target.value)\r\n      }else if(event.target.name === 'language'){\r\n        setLanguage(event.target.value)\r\n      }else if(event.target.name === 'startYear'){\r\n        setStartYear(event.target.value)\r\n      }\r\n      else if(event.target.name === 'endYear'){\r\n        setEndYear(event.target.value)\r\n      }\r\n    };\r\n\r\n    const handleRatingChange = (event, newRating) => {\r\n      setRating(newRating);\r\n    }; \r\n\r\n    const handlePopularityChange = (event, newPopularity) => {\r\n      setPopularity(newPopularity);\r\n    }; \r\n\r\n    const handleSubmit = event => {\r\n      event.preventDefault()\r\n      let data = {}\r\n      data.rating = rating\r\n      data.popularity = popularity\r\n      data.language = language\r\n      data.genre = genre\r\n      data.startYear = startYear\r\n      data.endYear = endYear\r\n      props.dataCallback(data)\r\n    }\r\n\r\n    return(\r\n          <form onSubmit={handleSubmit} padding={\"30px\"}>\r\n            <Typography gutterBottom>\r\n              Language\r\n            </Typography>\r\n            <Select\r\n              labelId=\"languageInfo\"\r\n              id=\"language-info\"\r\n              name=\"language\"\r\n              value={language}\r\n              displayEmpty\r\n              onChange={handleGeneralChange}\r\n            >\r\n            {languages.map((language) => {\r\n              return <MenuItem key={language.iso_639_1} value={language.iso_639_1}>{language.english_name}</MenuItem>\r\n            })}\r\n            </Select>\r\n            <br></br><br></br>\r\n            <Typography gutterBottom>\r\n              Genre\r\n            </Typography>\r\n            <Select\r\n              labelId=\"genreList\"\r\n              id=\"genre-list\"\r\n              name=\"genre\"\r\n              value={genre}\r\n              displayEmpty\r\n              onChange={handleGeneralChange}\r\n            >\r\n            {genres.map((genre) => {\r\n              return <MenuItem key={genre.id} value={genre.id}>{genre.name}</MenuItem>\r\n            })}\r\n            </Select>\r\n            <br></br><br></br>\r\n            <Typography gutterBottom>\r\n            Ratings (0-10):\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={rating}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={0.5}\r\n              marks\r\n              min={0}\r\n              max={10}\r\n              value={rating}\r\n              onChange={handleRatingChange}\r\n            />\r\n\r\n            <Typography gutterBottom>\r\n            Popularity (0-20000)\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={popularity}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={100}\r\n              marks\r\n              min={0}\r\n              max={20000}\r\n              value={popularity}\r\n              onChange={handlePopularityChange}\r\n            />\r\n\r\n            <Typography gutterBottom>\r\n            From Year\r\n            </Typography>\r\n            <Select\r\n              labelId=\"startYear\"\r\n              id=\"start-year\"\r\n              value={startYear}\r\n              name=\"startYear\"\r\n              displayEmpty\r\n              onChange={handleGeneralChange}\r\n            >\r\n            {dateRange.map((year) => {\r\n              return <MenuItem key={year} value={year}>{year}</MenuItem>\r\n            })}\r\n            </Select>\r\n            <br></br><br></br>\r\n            <Typography gutterBottom>\r\n            To Year\r\n            </Typography>\r\n            <Select\r\n              labelId=\"endYear\"\r\n              id=\"end-year\"\r\n              name=\"endYear\"\r\n              value={endYear}\r\n              displayEmpty\r\n              onChange={handleGeneralChange}\r\n            >\r\n            {dateRange.map((year) => {\r\n              return <MenuItem key={year} value={year}>{year}</MenuItem>\r\n            })}\r\n            </Select>\r\n\r\n            <br></br><br></br>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Random Movie</Button>\r\n          </form>\r\n    )\r\n}\r\n\r\nexport default Form","C:\\Users\\Aaron\\Desktop\\randommovie\\src\\components\\MovieDisplay\\MovieDisplay.js",["32","33"],"import React, {useEffect, useState} from \"react\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport '../../index.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: \"white\",\r\n    background: \"#3f50b5\",\r\n    marginBottom: \"10px\"\r\n  },\r\n  text: {\r\n    color: \"#3f50b5\"\r\n  }\r\n}));\r\n\r\n\r\nconst MovieDisplay = (props) => {\r\n\r\n  const classes = useStyles();\r\n  const title = \"Original Title: \"\r\n\r\n  useEffect(() => {\r\n    if(props.info){\r\n      let tempGenre = ''\r\n\r\n      for(let i = 0; i < props.info.genre_ids.length; i++){\r\n        for(let j = 0; j < props.genres.length; j++){\r\n          if(props.genres[j].id === props.info.genre_ids[i]){\r\n            tempGenre += props.genres[j].name + \", \"\r\n            break\r\n          }\r\n        }\r\n      }\r\n      \r\n      if(tempGenre){\r\n        tempGenre = tempGenre.slice(0, -2)\r\n      }\r\n    }\r\n    \r\n  }, [])\r\n\r\n  return (\r\n    <Box width=\"90%\" bgcolor=\"white\" padding={1} marginRight={\"30px\"} border={4} borderRadius={16} borderColor=\"primary.main\">\r\n      <Grid container >\r\n        <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n              {props.info.title}\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={5}>\r\n          <img src={'https://image.tmdb.org/t/p/w500/' + props.info.poster_path}  alt=\"img\" width=\"80%\"/>\r\n        </Grid>\r\n\r\n        <Grid item xs={7} padding={\"30px\"}>\r\n          <h3 style={{color: \"#3f50b5\", marginBottom: '0'}}>Overview</h3><hr />\r\n          <p style={{fontSize:\"1.2em\"}}>{props.info.overview}</p>\r\n          <Hidden mdDown>\r\n            <img src={'https://image.tmdb.org/t/p/w400/' + props.info.backdrop_path}  alt=\"img\" width=\"80%\"/><br></br>\r\n          </Hidden>\r\n          <b className={classes.text}>Genre(s):</b> {props.genres}<br></br>\r\n          <b className={classes.text}>Released:</b> {props.info.release_date}<br></br>\r\n          <b className={classes.text}>Popularity:</b> {props.info.popularity}<br></br>\r\n          <b className={classes.text}>Rating:</b> {props.info.vote_average}/10<br></br>\r\n          {props.info.title !== props.info.original_title && <b className={classes.text}>{title}</b>}\r\n          {props.info.title !== props.info.original_title && props.info.original_title}<br></br>\r\n        </Grid>\r\n      </Grid>\r\n      </Box>\r\n  );\r\n}\r\n\r\nexport default MovieDisplay;\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":88,"column":6,"nodeType":"40","endLine":88,"endColumn":22,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":141,"column":23,"nodeType":"44","messageId":"45","endLine":141,"endColumn":25},{"ruleId":"38","severity":1,"message":"46","line":43,"column":8,"nodeType":"40","endLine":43,"endColumn":10,"suggestions":"47"},{"ruleId":"38","severity":1,"message":"46","line":61,"column":8,"nodeType":"40","endLine":61,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"38","severity":1,"message":"53","line":49,"column":6,"nodeType":"40","endLine":49,"endColumn":8,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'genres', 'movieData.genre_ids', and 'movieString'. Either include them or remove the dependency array.","ArrayExpression",["57"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'props.api_key' and 'props.url'. Either include them or remove the dependency array.",["58"],["59"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'props.genres' and 'props.info'. Either include them or remove the dependency array.",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"63","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [genres, loadMovieState, movieData.genre_ids, movieString]",{"range":"68","text":"69"},"Update the dependencies array to be: [props.api_key, props.url]",{"range":"70","text":"71"},{"range":"72","text":"71"},"Update the dependencies array to be: [props.genres, props.info]",{"range":"73","text":"74"},[2668,2684],"[genres, loadMovieState, movieData.genre_ids, movieString]",[1508,1510],"[props.api_key, props.url]",[1942,1944],[1154,1156],"[props.genres, props.info]"]